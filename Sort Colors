Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.
We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.
You must solve this problem without using the library's sort function.
Example 1:
Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Example 2:
Input: nums = [2,0,1]
Output: [0,1,2]
---------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution(object):
    def sortColors(self, nums):
        l, mid, r = 0, 0, len(nums) - 1

        while mid <= r:
            if nums[mid] == 0:
                nums[l], nums[mid] = nums[mid], nums[l]  # Swap
                l += 1
                mid += 1
            elif nums[mid] == 1:
                mid += 1
            else:  # nums[mid] == 2
                nums[mid], nums[r] = nums[r], nums[mid]  # Swap
                r -= 1

        return nums  # Return the sorted array
------------------------------------------------------------------------------------------------------------------------
class Solution(object):
    def sortColors(self, nums):
        sum0 = 0
        sum1 = 0
        sum2 = 0
        l = len(nums)
        for i in range(l):
            if nums[i]==0:
                sum0+=1
            elif nums[i]==1:
                sum1+=1
            else:
                sum2+=1
        for i in range(sum0):
            nums[i]=0
        for j in range(sum0, sum0+sum1):
            nums[j]=1
        for k in range(sum0+sum1, l):
            nums[k]=2
        return nums
