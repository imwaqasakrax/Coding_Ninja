Given an array A[ ] of positive integers of size N, where each value represents the number of chocolates in a packet. Each packet can have a variable number of chocolates. There are M students, the task is to distribute chocolate packets among M students such that :
1. Each student gets exactly one packet.
2. The difference between maximum number of chocolates given to a student and minimum number of chocolates given to a student is minimum.
Example 1:
Input:
N = 8, M = 5
A = {3, 4, 1, 9, 56, 7, 9, 12}
Output: 6
Explanation: The minimum difference between maximum chocolates and minimum chocolates is 9 - 3 = 6 by choosing following M packets :{3, 4, 9, 7, 9}.
Example 2:
Input:
N = 7, M = 3
A = {7, 3, 2, 4, 9, 12, 56}
Output: 2
Explanation: The minimum difference between maximum chocolates and minimum chocolates is 4 - 2 = 2 by choosing following M packets :{3, 2, 4}.
Your Task:
You don't need to take any input or print anything. Your task is to complete the function findMinDiff() which takes array A[ ], N and M as input parameters and returns the minimum possible difference between maximum number of chocolates given to a student and minimum number of chocolates given to a student.
Expected Time Complexity: O(N*Log(N))
Expected Auxiliary Space: O(1)
------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution:
    def findMinDiff(self, A, N, M):
        if M > N:
            return -1  
        A.sort()  
        min1 = float('inf') 
        for i in range(N - M + 1):
            d = A[i + M - 1] - A[i]
            if d < min1:
                min1 = d
        
        return min1
--------------------------------------------------------------------------------------------------------------
class Solution:
    def canDistribute(self, arr, n, m, maxChocolates):
        # Checks if it's possible to distribute with the given maxChocolates constraint
        students = 1
        currentSum = 0
        
        for i in range(n):
            if arr[i] > maxChocolates:
                return False
            
            if currentSum + arr[i] > maxChocolates:
                students += 1
                currentSum = arr[i]
                
                if students > m:
                    return False
            else:
                currentSum += arr[i]
                
        return True

    def chocolateDistribution(self, arr, n, m):
        if m > n:
            return -1
        
        low = max(arr)  # Minimum chocolates in a single packet
        high = sum(arr)  # Maximum total chocolates
        
        result = high
        
        while low <= high:
            mid = (low + high) // 2
            
            if self.canDistribute(arr, n, m, mid):
                result = mid
                high = mid - 1
            else:
                low = mid + 1
                
        return result
-------------------------------------------------------------------------------------------------------------------------------------
class Solution:
    def chocolateDistribution(self, arr, n, m):
        if m > n:
            return -1
        min_diff = float('inf')

        for i in range(n - m + 1):
            current_diff = max(arr[i:i + m]) - min(arr[i:i + m])
            min_diff = min(min_diff, current_diff)
        
        return min_diff




